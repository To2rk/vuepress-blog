{"remainingRequest":"/home/GitHub/VuePress/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/GitHub/VuePress/node_modules/cache-loader/dist/cjs.js??ref--1-0!/home/GitHub/VuePress/node_modules/vue-loader/lib/index.js??ref--1-1!/home/GitHub/VuePress/node_modules/@vuepress/markdown-loader/index.js??ref--1-2!/home/GitHub/VuePress/blog/categories/Linux/proxyee-down——突破百度网盘限速.md?vue&type=template&id=12ac957c&","dependencies":[{"path":"/home/GitHub/VuePress/blog/categories/Linux/proxyee-down——突破百度网盘限速.md","mtime":1712898853000},{"path":"/home/GitHub/VuePress/node_modules/cache-loader/dist/cjs.js","mtime":1730540037971},{"path":"/home/GitHub/VuePress/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1730540038932},{"path":"/home/GitHub/VuePress/node_modules/cache-loader/dist/cjs.js","mtime":1730540037971},{"path":"/home/GitHub/VuePress/node_modules/vue-loader/lib/index.js","mtime":1730540038932},{"path":"/home/GitHub/VuePress/node_modules/@vuepress/markdown-loader/index.js","mtime":1730540037050}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}