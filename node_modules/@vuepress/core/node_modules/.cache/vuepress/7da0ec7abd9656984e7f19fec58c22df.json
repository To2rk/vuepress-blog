{"remainingRequest":"/home/GitHub/VuePress/node_modules/babel-loader/lib/index.js??ref--3-1!/home/GitHub/VuePress/blog/.vuepress/theme/helpers/utils.js","dependencies":[{"path":"/home/GitHub/VuePress/blog/.vuepress/theme/helpers/utils.js","mtime":1712898853000},{"path":"/home/GitHub/VuePress/node_modules/cache-loader/dist/cjs.js","mtime":1730540037971},{"path":"/home/GitHub/VuePress/node_modules/babel-loader/lib/index.js","mtime":1730540037914}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}