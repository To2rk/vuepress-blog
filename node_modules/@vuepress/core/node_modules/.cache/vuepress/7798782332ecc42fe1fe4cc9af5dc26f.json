{"remainingRequest":"/home/GitHub/VuePress/node_modules/babel-loader/lib/index.js??ref--3-1!/home/GitHub/VuePress/node_modules/@vuepress/core/lib/client/app.js","dependencies":[{"path":"/home/GitHub/VuePress/node_modules/@vuepress/core/lib/client/app.js","mtime":1730540036570},{"path":"/home/GitHub/VuePress/node_modules/cache-loader/dist/cjs.js","mtime":1730540037971},{"path":"/home/GitHub/VuePress/node_modules/babel-loader/lib/index.js","mtime":1730540037914}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9ob21lL0dpdEh1Yi9WdWVQcmVzcy9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc2xpY2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lm1hcC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CgovKiBnbG9iYWwgVlVFUFJFU1NfVEVNUF9QQVRIICovCmltcG9ydCBWdWUgZnJvbSAndnVlJzsKaW1wb3J0IFJvdXRlciBmcm9tICd2dWUtcm91dGVyJzsKaW1wb3J0IGRhdGFNaXhpbiBmcm9tICcuL2RhdGFNaXhpbic7CmltcG9ydCB7IHJvdXRlcyB9IGZyb20gJ0BpbnRlcm5hbC9yb3V0ZXMnOwppbXBvcnQgeyBzaXRlRGF0YSB9IGZyb20gJ0BpbnRlcm5hbC9zaXRlRGF0YSc7CmltcG9ydCBhcHBFbmhhbmNlcnMgZnJvbSAnQGludGVybmFsL2FwcC1lbmhhbmNlcnMnOwppbXBvcnQgZ2xvYmFsVUlDb21wb25lbnRzIGZyb20gJ0BpbnRlcm5hbC9nbG9iYWwtdWknOwppbXBvcnQgQ2xpZW50Q29tcHV0ZWRNaXhpbiBmcm9tICdAdHJhbnNmb3JtL0NsaWVudENvbXB1dGVkTWl4aW4nOwppbXBvcnQgVnVlUHJlc3MgZnJvbSAnLi9wbHVnaW5zL1Z1ZVByZXNzJzsKaW1wb3J0IHsgaGFuZGxlUmVkaXJlY3RGb3JDbGVhblVybHMgfSBmcm9tICcuL3JlZGlyZWN0LmpzJzsKaW1wb3J0IHsgZ2V0TGF5b3V0QXN5bmNDb21wb25lbnQgfSBmcm9tICcuL3V0aWwnOyAvLyBidWlsdC1pbiBjb21wb25lbnRzCgppbXBvcnQgQ29udGVudCBmcm9tICcuL2NvbXBvbmVudHMvQ29udGVudC5qcyc7CmltcG9ydCBDb250ZW50U2xvdHNEaXN0cmlidXRvciBmcm9tICcuL2NvbXBvbmVudHMvQ29udGVudFNsb3RzRGlzdHJpYnV0b3InOwppbXBvcnQgT3V0Ym91bmRMaW5rIGZyb20gJy4vY29tcG9uZW50cy9PdXRib3VuZExpbmsudnVlJzsKaW1wb3J0IENsaWVudE9ubHkgZnJvbSAnLi9jb21wb25lbnRzL0NsaWVudE9ubHknOyAvLyBzdWdnZXN0IGRldiBzZXJ2ZXIgcmVzdGFydCBvbiBiYXNlIGNoYW5nZQoKaWYgKG1vZHVsZS5ob3QpIHsKICB2YXIgcHJldkJhc2UgPSBzaXRlRGF0YS5iYXNlOwogIG1vZHVsZS5ob3QuYWNjZXB0KFZVRVBSRVNTX1RFTVBfUEFUSCArICcvaW50ZXJuYWwvc2l0ZURhdGEuanMnLCBmdW5jdGlvbiAoKSB7CiAgICBpZiAoc2l0ZURhdGEuYmFzZSAhPT0gcHJldkJhc2UpIHsKICAgICAgd2luZG93LmFsZXJ0KCJbdnVlcHJlc3NdIFNpdGUgYmFzZSBoYXMgY2hhbmdlZC4gIiArICJQbGVhc2UgcmVzdGFydCBkZXYgc2VydmVyIHRvIGVuc3VyZSBjb3JyZWN0IGFzc2V0IHBhdGhzLiIpOwogICAgfQogIH0pOwp9CgpWdWUuY29uZmlnLnByb2R1Y3Rpb25UaXAgPSBmYWxzZTsKVnVlLnVzZShSb3V0ZXIpOwpWdWUudXNlKFZ1ZVByZXNzKTsgLy8gbWl4aW4gZm9yIGV4cG9zaW5nICRzaXRlIGFuZCAkcGFnZQoKVnVlLm1peGluKGRhdGFNaXhpbihDbGllbnRDb21wdXRlZE1peGluLCBzaXRlRGF0YSkpOyAvLyBjb21wb25lbnQgZm9yIHJlbmRlcmluZyBtYXJrZG93biBjb250ZW50IGFuZCBzZXR0aW5nIHRpdGxlIGV0Yy4KCi8qIGVzbGludC1kaXNhYmxlIHZ1ZS9tYXRjaC1jb21wb25lbnQtZmlsZS1uYW1lICovCgpWdWUuY29tcG9uZW50KCdDb250ZW50JywgQ29udGVudCk7ClZ1ZS5jb21wb25lbnQoJ0NvbnRlbnRTbG90c0Rpc3RyaWJ1dG9yJywgQ29udGVudFNsb3RzRGlzdHJpYnV0b3IpOwpWdWUuY29tcG9uZW50KCdPdXRib3VuZExpbmsnLCBPdXRib3VuZExpbmspOyAvLyBjb21wb25lbnQgZm9yIGNsaWVudC1vbmx5IGNvbnRlbnQKClZ1ZS5jb21wb25lbnQoJ0NsaWVudE9ubHknLCBDbGllbnRPbmx5KTsgLy8gY29yZSBjb21wb25lbnRzCgpWdWUuY29tcG9uZW50KCdMYXlvdXQnLCBnZXRMYXlvdXRBc3luY0NvbXBvbmVudCgnTGF5b3V0JykpOwpWdWUuY29tcG9uZW50KCdOb3RGb3VuZCcsIGdldExheW91dEFzeW5jQ29tcG9uZW50KCdOb3RGb3VuZCcpKTsKLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZ1ZS9tYXRjaC1jb21wb25lbnQtZmlsZS1uYW1lICovCi8vIGdsb2JhbCBoZWxwZXIgZm9yIGFkZGluZyBiYXNlIHBhdGggdG8gYWJzb2x1dGUgdXJscwoKVnVlLnByb3RvdHlwZS4kd2l0aEJhc2UgPSBmdW5jdGlvbiAocGF0aCkgewogIHZhciBiYXNlID0gdGhpcy4kc2l0ZS5iYXNlOwoKICBpZiAocGF0aC5jaGFyQXQoMCkgPT09ICcvJykgewogICAgcmV0dXJuIGJhc2UgKyBwYXRoLnNsaWNlKDEpOwogIH0gZWxzZSB7CiAgICByZXR1cm4gcGF0aDsKICB9Cn07CgpleHBvcnQgZnVuY3Rpb24gY3JlYXRlQXBwKF94KSB7CiAgcmV0dXJuIF9jcmVhdGVBcHAuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKfQoKZnVuY3Rpb24gX2NyZWF0ZUFwcCgpIHsKICBfY3JlYXRlQXBwID0gX2FzeW5jVG9HZW5lcmF0b3IoIC8qI19fUFVSRV9fKi9yZWdlbmVyYXRvclJ1bnRpbWUubWFyayhmdW5jdGlvbiBfY2FsbGVlKGlzU2VydmVyKSB7CiAgICB2YXIgcm91dGVyQmFzZSwgcm91dGVyLCBvcHRpb25zLCBhcHA7CiAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgd2hpbGUgKDEpIHsKICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHJvdXRlckJhc2UgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuX19WVUVQUkVTU19ST1VURVJfQkFTRV9fID8gd2luZG93Ll9fVlVFUFJFU1NfUk9VVEVSX0JBU0VfXyA6IHNpdGVEYXRhLnJvdXRlckJhc2UgfHwgc2l0ZURhdGEuYmFzZTsKICAgICAgICAgICAgcm91dGVyID0gbmV3IFJvdXRlcih7CiAgICAgICAgICAgICAgYmFzZTogcm91dGVyQmFzZSwKICAgICAgICAgICAgICBtb2RlOiAnaGlzdG9yeScsCiAgICAgICAgICAgICAgZmFsbGJhY2s6IGZhbHNlLAogICAgICAgICAgICAgIHJvdXRlczogcm91dGVzLAogICAgICAgICAgICAgIHNjcm9sbEJlaGF2aW9yOiBmdW5jdGlvbiBzY3JvbGxCZWhhdmlvcih0bywgZnJvbSwgc2F2ZWRQb3NpdGlvbikgewogICAgICAgICAgICAgICAgaWYgKHNhdmVkUG9zaXRpb24pIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHNhdmVkUG9zaXRpb247CiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRvLmhhc2gpIHsKICAgICAgICAgICAgICAgICAgaWYgKFZ1ZS4kdnVlcHJlc3MuJGdldCgnZGlzYWJsZVNjcm9sbEJlaGF2aW9yJykpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6IGRlY29kZVVSSUNvbXBvbmVudCh0by5oYXNoKQogICAgICAgICAgICAgICAgICB9OwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIHsKICAgICAgICAgICAgICAgICAgICB4OiAwLAogICAgICAgICAgICAgICAgICAgIHk6IDAKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBoYW5kbGVSZWRpcmVjdEZvckNsZWFuVXJscyhyb3V0ZXIpOwogICAgICAgICAgICBvcHRpb25zID0ge307CiAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSA0OwogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gNzsKICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGFwcEVuaGFuY2Vycy5maWx0ZXIoZnVuY3Rpb24gKGVuaGFuY2VyKSB7CiAgICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBlbmhhbmNlciA9PT0gJ2Z1bmN0aW9uJzsKICAgICAgICAgICAgfSkubWFwKGZ1bmN0aW9uIChlbmhhbmNlcikgewogICAgICAgICAgICAgIHJldHVybiBlbmhhbmNlcih7CiAgICAgICAgICAgICAgICBWdWU6IFZ1ZSwKICAgICAgICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsCiAgICAgICAgICAgICAgICByb3V0ZXI6IHJvdXRlciwKICAgICAgICAgICAgICAgIHNpdGVEYXRhOiBzaXRlRGF0YSwKICAgICAgICAgICAgICAgIGlzU2VydmVyOiBpc1NlcnZlcgogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KSk7CgogICAgICAgICAgY2FzZSA3OgogICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMTI7CiAgICAgICAgICAgIGJyZWFrOwoKICAgICAgICAgIGNhc2UgOToKICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDk7CiAgICAgICAgICAgIF9jb250ZXh0LnQwID0gX2NvbnRleHRbImNhdGNoIl0oNCk7CiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoX2NvbnRleHQudDApOwoKICAgICAgICAgIGNhc2UgMTI6CiAgICAgICAgICAgIGFwcCA9IG5ldyBWdWUoT2JqZWN0LmFzc2lnbihvcHRpb25zLCB7CiAgICAgICAgICAgICAgcm91dGVyOiByb3V0ZXIsCiAgICAgICAgICAgICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoaCkgewogICAgICAgICAgICAgICAgcmV0dXJuIGgoJ2RpdicsIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICBpZDogJ2FwcCcKICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwgW2goJ1JvdXRlclZpZXcnLCB7CiAgICAgICAgICAgICAgICAgIHJlZjogJ2xheW91dCcKICAgICAgICAgICAgICAgIH0pLCBoKCdkaXYnLCB7CiAgICAgICAgICAgICAgICAgICJjbGFzcyI6ICdnbG9iYWwtdWknCiAgICAgICAgICAgICAgICB9LCBnbG9iYWxVSUNvbXBvbmVudHMubWFwKGZ1bmN0aW9uIChjb21wb25lbnQpIHsKICAgICAgICAgICAgICAgICAgcmV0dXJuIGgoY29tcG9uZW50KTsKICAgICAgICAgICAgICAgIH0pKV0pOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkpOwogICAgICAgICAgICByZXR1cm4gX2NvbnRleHQuYWJydXB0KCJyZXR1cm4iLCB7CiAgICAgICAgICAgICAgYXBwOiBhcHAsCiAgICAgICAgICAgICAgcm91dGVyOiByb3V0ZXIKICAgICAgICAgICAgfSk7CgogICAgICAgICAgY2FzZSAxNDoKICAgICAgICAgIGNhc2UgImVuZCI6CiAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgfQogICAgICB9CiAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzQsIDldXSk7CiAgfSkpOwogIHJldHVybiBfY3JlYXRlQXBwLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7Cn0="},null]}