{"remainingRequest":"/home/GitHub/VuePress/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/GitHub/VuePress/blog/.vuepress/theme/components/NavLinks.vue?vue&type=style&index=0&lang=stylus&","dependencies":[{"path":"/home/GitHub/VuePress/blog/.vuepress/theme/components/NavLinks.vue","mtime":1712898853000},{"path":"/home/GitHub/VuePress/node_modules/css-loader/dist/cjs.js","mtime":1730540038475},{"path":"/home/GitHub/VuePress/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1730540038932},{"path":"/home/GitHub/VuePress/node_modules/postcss-loader/src/index.js","mtime":1730540038804},{"path":"/home/GitHub/VuePress/node_modules/stylus-loader/index.js","mtime":1730540039769},{"path":"/home/GitHub/VuePress/node_modules/cache-loader/dist/cjs.js","mtime":1730540037971},{"path":"/home/GitHub/VuePress/node_modules/vue-loader/lib/index.js","mtime":1730540038932}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm5hdi1saW5rcwogIGRpc3BsYXkgaW5saW5lLWJsb2NrCiAgYQogICAgbGluZS1oZWlnaHQgMS40cmVtCiAgICBjb2xvciB2YXIoLS10ZXh0LWNvbG9yKQogICAgJjpob3ZlciwgJi5yb3V0ZXItbGluay1hY3RpdmUKICAgICAgY29sb3IgJGFjY2VudENvbG9yCiAgICAgIC5pY29uZm9udAogICAgICAgIGNvbG9yICRhY2NlbnRDb2xvcgogIC5uYXYtaXRlbQogICAgcG9zaXRpb24gcmVsYXRpdmUKICAgIGRpc3BsYXkgaW5saW5lLWJsb2NrCiAgICBtYXJnaW4tbGVmdCAxLjVyZW0KICAgIGxpbmUtaGVpZ2h0IDJyZW0KICAgICY6Zmlyc3QtY2hpbGQKICAgICAgbWFyZ2luLWxlZnQgMAogIC5yZXBvLWxpbmsKICAgIG1hcmdpbi1sZWZ0IDEuNXJlbQoKQG1lZGlhIChtYXgtd2lkdGg6ICRNUU1vYmlsZSkKICAubmF2LWxpbmtzCiAgICAubmF2LWl0ZW0sIC5yZXBvLWxpbmsKICAgICAgbWFyZ2luLWxlZnQgMAoKQG1lZGlhIChtaW4td2lkdGg6ICRNUU1vYmlsZSkKICAubmF2LWl0ZW0gPiBhOm5vdCguZXh0ZXJuYWwpCiAgICAmOmhvdmVyLCAmLnJvdXRlci1saW5rLWFjdGl2ZQogICAgICBtYXJnaW4tYm90dG9tIC0ycHgK"},{"version":3,"sources":["NavLinks.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"NavLinks.vue","sourceRoot":"blog/.vuepress/theme/components","sourcesContent":["<template>\n  <nav\n    class=\"nav-links\"\n    v-if=\"userLinks.length || repoLink\"\n  >\n    <!-- user links -->\n    <div\n      class=\"nav-item\"\n      v-for=\"item in userLinks\"\n      :key=\"item.link\">\n      <DropdownLink\n        v-if=\"item.type === 'links'\"\n        :item=\"item\"/>\n      <NavLink\n        v-else\n        :item=\"item\"/>\n    </div>\n\n    <!-- repo link -->\n    <a\n      v-if=\"repoLink\"\n      :href=\"repoLink\"\n      class=\"repo-link\"\n      target=\"_blank\"\n      rel=\"noopener noreferrer\">\n      <reco-icon :icon=\"`reco-${repoLabel.toLowerCase()}`\" />\n      {{ repoLabel }}\n      <OutboundLink/>\n    </a>\n  </nav>\n</template>\n\n<script>\nimport { RecoIcon } from '@vuepress-reco/core/lib/components'\nimport DropdownLink from '@theme/components/DropdownLink'\nimport { resolveNavLinkItem } from '@theme/helpers/utils'\nimport NavLink from '@theme/components/NavLink'\n\nexport default {\n  components: { NavLink, DropdownLink, RecoIcon },\n\n  computed: {\n    userNav () {\n      return this.$themeLocaleConfig.nav || this.$themeConfig.nav || []\n    },\n\n    nav () {\n      const { $site: { locales }, userNav } = this\n      if (locales && Object.keys(locales).length > 1) {\n        const currentLink = this.$page.path\n        const routes = this.$router.options.routes\n        const themeLocales = this.$themeConfig.locales || {}\n        const languageDropdown = {\n          text: this.$themeLocaleConfig.selectText || 'Languages',\n          items: Object.keys(locales).map(path => {\n            const locale = locales[path]\n            const text = themeLocales[path] && themeLocales[path].label || locale.lang\n            let link\n            // Stay on the current page\n            if (locale.lang === this.$lang) {\n              link = currentLink\n            } else {\n              // Try to stay on the same page\n              link = currentLink.replace(this.$localeConfig.path, path)\n              // fallback to homepage\n              if (!routes.some(route => route.path === link)) {\n                link = path\n              }\n            }\n            return { text, link }\n          })\n        }\n        return [...userNav, languageDropdown]\n      }\n\n      // blogConfig 的处理，根绝配置自动添加分类和标签\n      const blogConfig = this.$themeConfig.blogConfig || {}\n      const isHasCategory = userNav.some(item => {\n        if (blogConfig.category) {\n          return item.text === (blogConfig.category.text || '分类')\n        } else {\n          return true\n        }\n      })\n      const isHasTag = userNav.some(item => {\n        if (blogConfig.tag) {\n          return item.text === (blogConfig.tag.text || '标签')\n        } else {\n          return true\n        }\n      })\n\n      if (!isHasCategory && Object.hasOwnProperty.call(blogConfig, 'category')) {\n        const category = blogConfig.category\n        const $categories = this.$categories\n        userNav.splice(parseInt(category.location || 2) - 1, 0, {\n          items: $categories.list.map(item => {\n            item.link = item.path\n            item.text = item.name\n            return item\n          }),\n          text: category.text || '分类',\n          type: 'links',\n          icon: 'reco-category'\n        })\n      }\n      if (!isHasTag && Object.hasOwnProperty.call(blogConfig, 'tag')) {\n        const tag = blogConfig.tag\n        userNav.splice(parseInt(tag.location || 3) - 1, 0, {\n          link: '/tag/',\n          text: tag.text || '标签',\n          type: 'links',\n          icon: 'reco-tag'\n        })\n      }\n\n      return userNav\n    },\n\n    userLinks () {\n      return (this.nav || []).map(link => {\n        return Object.assign(resolveNavLinkItem(link), {\n          items: (link.items || []).map(resolveNavLinkItem)\n        })\n      })\n    },\n\n    repoLink () {\n      const { repo } = this.$themeConfig\n      if (repo) {\n        return /^https?:/.test(repo)\n          ? repo\n          : `https://github.com/${repo}`\n      }\n      return ''\n    },\n\n    repoLabel () {\n      if (!this.repoLink) return\n      if (this.$themeConfig.repoLabel) {\n        return this.$themeConfig.repoLabel\n      }\n\n      const repoHost = this.repoLink.match(/^https?:\\/\\/[^/]+/)[0]\n      const platforms = ['GitHub', 'GitLab', 'Bitbucket']\n      for (let i = 0; i < platforms.length; i++) {\n        const platform = platforms[i]\n        if (new RegExp(platform, 'i').test(repoHost)) {\n          return platform\n        }\n      }\n\n      return 'Source'\n    }\n  }\n}\n</script>\n\n<style lang=\"stylus\">\n.nav-links\n  display inline-block\n  a\n    line-height 1.4rem\n    color var(--text-color)\n    &:hover, &.router-link-active\n      color $accentColor\n      .iconfont\n        color $accentColor\n  .nav-item\n    position relative\n    display inline-block\n    margin-left 1.5rem\n    line-height 2rem\n    &:first-child\n      margin-left 0\n  .repo-link\n    margin-left 1.5rem\n\n@media (max-width: $MQMobile)\n  .nav-links\n    .nav-item, .repo-link\n      margin-left 0\n\n@media (min-width: $MQMobile)\n  .nav-item > a:not(.external)\n    &:hover, &.router-link-active\n      margin-bottom -2px\n</style>\n"]}]}